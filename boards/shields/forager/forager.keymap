#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define NUM 1
#define FUN 2
#define MOD 3

&lt {
    compatible = "zmk,behavior-hold-tap";
    flavor = "balanced";
    tapping-term-ms = <250>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <150>;
    hold-trigger-on-release;
};

/ {
    behaviors {
      l_p: left_positional_hold_tap {
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "balanced";
          tapping-term-ms = <275>;                 
          quick-tap-ms = <175>;
          require-prior-idle-ms = <150>;
          bindings = <&kp>, <&kp>;
          hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
          hold-trigger-on-release;
        };

      r_p: right_positional_hold_tap {
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "balanced";
          tapping-term-ms = <275>;                      
          quick-tap-ms = <175>;
          require-prior-idle-ms = <150>;
          bindings = <&kp>, <&kp>;
          hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
          hold-trigger-on-release;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        mod_layer {
            if-layers = <NUM FUN>;
            then-layer = <MOD>;
        };
    };

  keymap {
    compatible = "zmk,keymap";

    def {
      bindings = <
        &kp Q          &kp W         &kp E         &kp R          &kp T                                           &kp Y           &kp U          &kp I         &kp O            &kp P
        &l_p LGUI A    &l_p LALT S   &l_p LCTRL D  &l_p LSHFT F   &kp G                                           &kp H           &r_p RSHFT J   &r_p RCTRL K  &r_p LALT L      &r_p RGUI SEMI
        &kp Z          &l_p RALT X   &kp C         &kp V          &kp B                                           &kp N           &kp M          &kp MINUS     &r_p RALT LBKT   &kp SQT
                                                                  &lt NUM BSPC   &lt FUN TAB      &lt FUN ENTER   &lt NUM SPACE
      >;
    };

    num {
      bindings = <
        &none         &kp N7         &kp N8         &kp N9          &kp COMMA                                  &none      &none              &none              &none            &none
        &kp LGUI      &l_p LALT N4   &l_p LCTRL N5  &l_p LSHFT N6   &kp DOT                                    &none      &r_p RSHFT GRAVE   &r_p RCTRL EQUAL   &r_p LALT RBKT   &r_p RGUI BSLH
        &none         &l_p RALT N1   &kp N2         &kp N3          &kp N0                                     &none      &kp NUBS           &kp COMMA          &r_p RALT DOT    &kp FSLH
                                                                    &trans         &trans         &trans       &trans
      >;
    };

    fun {
      bindings = <
        &kp ESC       &kp F7         &kp F8         &kp F9          &kp F12                                    &kp KP_NLCK   &kp HOME          &kp PG_DN         &kp PG_UP         &kp END
        &kp LGUI      &l_p LALT F4   &l_p LCTRL F5  &l_p LSHFT F6   &kp F11                                    &kp CAPS      &r_p RSHFT LEFT   &r_p RCTRL DOWN   &r_p LALT UP      &r_p RGUI RIGHT
        &none         &l_p RALT F1   &kp F2         &kp F3          &kp F10                                    &kp SLCK      &kp DEL           &kp INS           &r_p RALT PSCRN   &kp PAUSE_BREAK
                                                                    &trans          &trans         &trans      &trans
      >;
    };

    mod {
      bindings = <
        &bt BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3    &bt BT_SEL 4                              &none                    &none             &none          &none          &none
        &kp LGUI        &kp LALT     &kp LCTRL    &kp LSHFT       &bt BT_CLR                                &kp C_MUTE               &kp C_VOL_DN      &kp C_BRI_DN   &kp C_BRI_UP   &kp C_VOL_UP
        &bootloader     &kp RALT     &none        &none           &none                                     &kp C_PP                 &kp C_PREV        &kp C_NEXT     &none          &bootloader
                                                                  &trans         &trans         &trans      &trans
      >;
    };
  };
};
